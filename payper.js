// Generated by CoffeeScript 1.6.2
/*
# payper
======

## Node Examples for the _PayPal_ REST API with AJAX


## Featuring [SuperAgent](https://github.com/visionmedia/superagent) for nice the AJAX
See the PayPal API at: https://developer.paypal.com/webapps/developer/docs/api


## Install:
- Run the [nodejs.org](http://nodejs.org) installer.
- Download the [zip file](https://github.com/apelade/payper/archive/master.zip).
- Extract it and open a shell there.
- `npm install superagent`
- `npm install -g coffee-script` if desired?


## Run:
- `node payper.js` or `coffee payper.coffee`
- `coffee -c payper.coffee` compiles coffee to javascript


## Notes: 
- The tests that try to execute a payment Correctly Fail with PAYMENT_STATE_INVALID 
  when running static PayPal test objects.
- To create live test objects, get a dev client id and secret from PayPal.
- Note the payment approval step must have been taken by the user for
  completePayment to succeed.
- Don't forget to redirect to approval_url listed in response links if using
  the paypal payment method.
- Since this is an example, uses a single-arg callback.
- Otherwise, it may be a callback per result state, using a common err handler.
*/


(function() {
  var PAYMENT, ajaxGet, ajaxPost, exports, printResults, superagent;

  superagent = require('superagent');

  printResults = function(err, res) {
    if (err != null) {
      console.log(err);
    }
    if ((res != null ? res.body : void 0) != null) {
      console.log(res.body);
    }
    return console.log(' ');
  };

  PAYMENT = 'https://api.sandbox.paypal.com/v1/payments/payment/';

  ajaxGet = function(extraPath, token, callback) {
    return superagent.agent().get(PAYMENT + extraPath).set('Content-Type', 'application/json').set('Authorization', 'Bearer ' + token).end(callback);
  };

  ajaxPost = function(path, data, token, callback) {
    return superagent.agent().post(PAYMENT + path).type('application/x-www-form-urlencoded').send(data).set('Content-Type', 'application/json').set('Authorization', 'Bearer ' + token).end(callback);
  };

  exports = module.exports = {
    getToken: function(username, password, callback) {
      var basicAuthCred, client_id, client_secret, data, url;

      if (callback == null) {
        callback = printResults;
      }
      client_id = username;
      client_secret = password;
      basicAuthCred = client_id + ":" + client_secret + "@";
      url = "https://" + basicAuthCred + "api.sandbox.paypal.com/v1/oauth2/token";
      data = {
        grant_type: 'client_credentials'
      };
      return superagent.agent().post(url).type('application/x-www-form-urlencoded').send(data).set('Accept', 'application/json').set('Accept-Language', 'en_US').end(callback);
    },
    getAllPayments: function(token, callback) {
      if (callback == null) {
        callback = printResults;
      }
      return ajaxGet("", token, callback);
    },
    getApprovedPayments: function(token, callback) {
      if (callback == null) {
        callback = printResults;
      }
      return ajaxGet('?state=approved', token, callback);
    },
    getPaymentsPaged: function(token, callback) {
      if (callback == null) {
        callback = printResults;
      }
      return ajaxGet('?count=10', token, callback);
    },
    getPaymentById: function(id, token, callback) {
      if (callback == null) {
        callback = printResults;
      }
      return ajaxGet(id, token, callback);
    },
    createPayment: function(payment, token, callback) {
      if (callback == null) {
        callback = printResults;
      }
      return ajaxPost("", JSON.stringify(payment), token, callback);
    },
    executePayment: function(id, payer, token, callback) {
      if (callback == null) {
        callback = printResults;
      }
      return ajaxPost(id + '/execute/', JSON.stringify(payer), token, callback);
    }
  };

  return module.exports;

}).call(this);
