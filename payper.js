// Generated by CoffeeScript 1.6.2
/*
  Node Examples for the Paypal REST API with SuperAgent AJAX
  See https://github.com/apelade/payper/README.md for details
*/

var CREDIT_CARD, PAYMENT, REFUND, SALE, ajaxGet, ajaxPost, exports, printResults, superagent;

superagent = require('superagent');

printResults = function(err, res) {
  if (err != null) {
    console.log(err);
  }
  if ((res != null ? res.body : void 0) != null) {
    return console.log(res.body);
  }
};

PAYMENT = 'https://api.sandbox.paypal.com/v1/payments/payment/';

SALE = 'https://api.paypal.com/v1/payments/sale/';

REFUND = 'https://api.paypal.com/v1/refund/';

CREDIT_CARD = 'https://api.paypal.com/v1/vault/credit-card/';

/*
  Three wrapper functions for each main ajax type we need. No beforeSend func!
*/


ajaxGet = function(extraPath, token, callback) {
  return superagent.agent().get(PAYMENT + extraPath).set('Content-Type', 'application/json').set('Authorization', 'Bearer ' + token).end(callback);
};

ajaxPost = function(path, data, token, callback) {
  return superagent.agent().post(PAYMENT + path).type('application/x-www-form-urlencoded').send(data).set('Content-Type', 'application/json').set('Authorization', 'Bearer ' + token).end(callback);
};

/*
  These functions could be called from Express server route files, for example
  Params username and password are paypal sandbox credentials.
  Get your own for interaction with live paypal objects.
*/


exports = module.exports = {
  getToken: function(username, password, callback) {
    var basicAuthCred, client_id, client_secret, data, url;

    if (callback == null) {
      callback = printResults;
    }
    client_id = username;
    client_secret = password;
    basicAuthCred = client_id + ":" + client_secret + "@";
    url = "https://" + basicAuthCred + "api.sandbox.paypal.com/v1/oauth2/token";
    data = {
      grant_type: 'client_credentials'
    };
    return superagent.agent().post(url).type('application/x-www-form-urlencoded').send(data).set('Accept', 'application/json').set('Accept-Language', 'en_US').end(callback);
  },
  getAllPayments: function(token, callback) {
    if (callback == null) {
      callback = printResults;
    }
    return ajaxGet('', token, callback);
  },
  getApprovedPayments: function(token, callback) {
    if (callback == null) {
      callback = printResults;
    }
    return ajaxGet('?state=approved', token, callback);
  },
  getPaymentsPaged: function(token, callback) {
    if (callback == null) {
      callback = printResults;
    }
    return ajaxGet('?count=10', token, callback);
  },
  getPaymentById: function(id, token, callback) {
    if (callback == null) {
      callback = printResults;
    }
    return ajaxGet(id, token, callback);
  },
  createPayment: function(payment, token, callback) {
    if (callback == null) {
      callback = printResults;
    }
    return ajaxPost('', JSON.stringify(payment), token, callback);
  },
  executePayment: function(id, payer, token, callback) {
    if (callback == null) {
      callback = printResults;
    }
    return ajaxPost(id + '/execute/', JSON.stringify(payer), token, callback);
  },
  getSaleById: function(id, token, callback) {
    if (callback == null) {
      callback = printResults;
    }
    return ajaxGet(SALE + id, token, callback);
  },
  refundSale: function(id, token, callback) {
    var empty_payload;

    if (callback == null) {
      callback = printResults;
    }
    empty_payload = {};
    return ajaxPost(SALE + id + '/refund', empty_payload, token, callback);
  },
  getRefundById: function(id, token, callback) {
    if (callback == null) {
      callback = printResults;
    }
    return ajaxGet(REFUND + id, token, callback);
  },
  storeCreditCard: function(type, num, exp_mo, exp_yr, cvv2, first_name, last_name, billing_addr, token, callback) {
    var card;

    if (callback == null) {
      callback = printResults;
    }
    card = {
      type: type,
      number: num,
      expire_month: exp_mo,
      expire_year: exp_yr,
      cvv2: cvv2,
      first_name: first_name,
      last_name: last_name,
      billing_addr: billing_addr
    };
    return ajaxPost(CREDIT_CARD, JSON.stringify(card), token, callback);
  },
  getCreditCardById: function(id, token, callback) {
    if (callback == null) {
      callback = printResults;
    }
    return ajax.get(CREDIT_CARD + id, token, callback);
  }
};

return module.exports;
